{"ast":null,"code":"var _jsxFileName = \"/Users/karapalumbo/code/Springboard/FULL Course Materials /2/react-jokes-classes/src/JokeList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nclass JokeList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n\n  componentDidUpdate() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n\n  async getJokes() {\n    try {\n      let jokes = this.state.jokes;\n      let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\") || \"{}\");\n      let seenJokes = new Set(jokes.map(j => j.id));\n\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          status,\n          ...joke\n        } = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n          jokes.push({ ...joke,\n            votes: jokeVotes[joke.id],\n            locked: false\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n\n      this.setState({\n        jokes\n      });\n      window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  generateNewJokes() {\n    this.setState(st => ({\n      jokes: st.jokes.filter(j => j.locked)\n    }));\n  }\n\n  resetVotes() {\n    window.localStorage.setItem(\"jokeVotes\", \"{}\");\n    this.setState(st => ({\n      jokes: st.jokes.map(joke => ({ ...joke,\n        votes: 0\n      }))\n    }));\n  }\n\n  vote(id, delta) {\n    let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\"));\n    jokeVotes[id] = (jokeVotes[id] || 0) + delta;\n    window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    this.setState(st => ({\n      jokes: st.jokes.map(j => j.id === id ? { ...j,\n        votes: j.votes + delta\n      } : j)\n    }));\n  }\n\n  toggleLock(id) {\n    this.setState(st => ({\n      jokes: st.jokes.map(j => j.id === id ? { ...j,\n        locked: !j.locked\n      } : j)\n    }));\n  }\n\n  render() {\n    let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n    let allLocked = sortedJokes.filter(j => j.locked).length === this.props.numJokesToGet;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"JokeList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: this.generateNewJokes,\n      disabled: allLocked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, \"Get New Jokes\"), sortedJokes.map(j => /*#__PURE__*/React.createElement(Joke, {\n      text: j.joke,\n      key: j.id,\n      id: j.id,\n      votes: j.votes,\n      vote: this.vote,\n      locked: j.locked,\n      toggleLock: this.toggleLock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })), sortedJokes.length < this.props.numJokesToGet ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-4x fa-spinner fa-spin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    })) : null);\n  }\n\n}\n\nJokeList.defaultProps = {\n  numJokesToGet: 10\n};\nexport default JokeList; // function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n//   /* get jokes if there are no jokes */\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n//   /* empty joke list and then call getJokes */\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n//   /* change vote for this id by delta (+1 or -1) */\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n//   /* render: either loading spinner or list of sorted jokes. */\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n//   return null;\n// }","map":{"version":3,"sources":["/Users/karapalumbo/code/Springboard/FULL Course Materials /2/react-jokes-classes/src/JokeList.js"],"names":["React","useState","useEffect","axios","Joke","JokeList","Component","constructor","props","state","jokes","generateNewJokes","bind","vote","componentDidMount","length","numJokesToGet","getJokes","componentDidUpdate","jokeVotes","JSON","parse","window","localStorage","getItem","seenJokes","Set","map","j","id","res","get","headers","Accept","status","joke","data","has","add","push","votes","locked","console","log","setState","setItem","stringify","e","st","filter","resetVotes","delta","toggleLock","render","sortedJokes","sort","a","b","allLocked","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n\n\nclass JokeList extends React.Component {\n  static defaultProps = { numJokesToGet: 10 }\n  \n  constructor(props) {\n    super(props);\n    this.state = { jokes: [] }\n    this.generateNewJokes = this.generateNewJokes.bind(this)\n    this.vote = this.vote.bind(this);\n  }\n\n    componentDidMount() {\n        if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n    }\n\n    componentDidUpdate() {\n        if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n    }\n\n    async getJokes() {\n      try {\n        let jokes = this.state.jokes;\n        let jokeVotes = JSON.parse(\n        window.localStorage.getItem(\"jokeVotes\") || \"{}\"\n      );\n        let seenJokes = new Set(jokes.map(j => j.id));\n\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { status, ...joke } = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n          jokes.push({ ...joke, votes: jokeVotes[joke.id], locked: false });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n\n      this.setState({ jokes });\n      window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  generateNewJokes() {\n    this.setState(st => ({ jokes: st.jokes.filter(j => j.locked)}));\n  }\n\n  resetVotes() {\n    window.localStorage.setItem(\"jokeVotes\", \"{}\");\n    this.setState(st => ({\n      jokes: st.jokes.map(joke => ({ ...joke, votes: 0 }))\n    }));\n  }\n\n  vote(id, delta) {\n    let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\"));\n    jokeVotes[id] = (jokeVotes[id] || 0) + delta;\n    window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    this.setState(st => ({\n      jokes: st.jokes.map(j =>\n        j.id === id ? { ...j, votes: j.votes + delta } : j\n      )\n    }));\n  }\n\n  toggleLock(id) {\n    this.setState(st => ({\n      jokes: st.jokes.map(j => (j.id === id ? { ...j, locked: !j.locked } : j))\n    }));\n  }\n\n  render() {\n    let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n    let allLocked =\n      sortedJokes.filter(j => j.locked).length === this.props.numJokesToGet;\n\n    return (\n      <div className=\"JokeList\">\n        <button\n          className=\"JokeList-getmore\"\n          onClick={this.generateNewJokes}\n          disabled={allLocked}\n        >\n          Get New Jokes\n        </button>\n\n\n        {sortedJokes.map(j => (\n          <Joke\n            text={j.joke}\n            key={j.id}\n            id={j.id}\n            votes={j.votes}\n            vote={this.vote}\n            locked={j.locked}\n            toggleLock={this.toggleLock}\n          />\n        ))}\n\n        {sortedJokes.length < this.props.numJokesToGet ? (\n          <div className=\"loading\">\n            <i className=\"fas fa-4x fa-spinner fa-spin\" />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default JokeList;\n\n\n\n// function JokeList({ numJokesToGet = 10 }) {\n//   const [jokes, setJokes] = useState([]);\n\n//   /* get jokes if there are no jokes */\n\n//   useEffect(function() {\n//     async function getJokes() {\n//       let j = [...jokes];\n//       let seenJokes = new Set();\n//       try {\n//         while (j.length < numJokesToGet) {\n//           let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//             headers: { Accept: \"application/json\" }\n//           });\n//           let { status, ...jokeObj } = res.data;\n  \n//           if (!seenJokes.has(jokeObj.id)) {\n//             seenJokes.add(jokeObj.id);\n//             j.push({ ...jokeObj, votes: 0 });\n//           } else {\n//             console.error(\"duplicate found!\");\n//           }\n//         }\n//         setJokes(j);\n//       } catch (e) {\n//         console.log(e);\n//       }\n//     }\n\n//     if (jokes.length === 0) getJokes();\n//   }, [jokes, numJokesToGet]);\n\n//   /* empty joke list and then call getJokes */\n\n//   function generateNewJokes() {\n//     setJokes([]);\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   function vote(id, delta) {\n//     setJokes(allJokes =>\n//       allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n//     );\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   if (jokes.length) {\n//     let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  \n//     return (\n//       <div className=\"JokeList\">\n//         <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//           Get New Jokes\n//         </button>\n  \n//         {sortedJokes.map(j => (\n//           <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//         ))}\n//       </div>\n//     );\n//   }\n\n//   return null;\n\n// }\n\n"]},"metadata":{},"sourceType":"module"}